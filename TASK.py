# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'renwu.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


# from serverThread import Thread
from PyQt5 import QtCore, QtGui, QtWidgets

import socket

import sys

import datetime

import sqlite3

from sign_indata import sign_data


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(643, 563)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(166, 410, 93, 28))
        self.pushButton.setObjectName("pushButton")
        self.pushButton_2 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_2.setGeometry(QtCore.QRect(353, 410, 93, 28))
        self.pushButton_2.setObjectName("pushButton_2")
        self.lineEdit = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit.setGeometry(QtCore.QRect(230, 130, 171, 21))
        self.lineEdit.setObjectName("lineEdit")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(180, 130, 41, 21))
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(120, 180, 101, 21))
        self.label_2.setObjectName("label_2")
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(130, 300, 91, 21))
        self.label_3.setObjectName("label_3")
        self.lineEdit_3 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_3.setGeometry(QtCore.QRect(230, 300, 171, 21))
        self.lineEdit_3.setObjectName("lineEdit_3")
        self.label_4 = QtWidgets.QLabel(self.centralwidget)
        self.label_4.setGeometry(QtCore.QRect(120, 240, 101, 21))
        self.label_4.setObjectName("label_4")
        self.dateTimeEdit = QtWidgets.QDateTimeEdit(self.centralwidget)
        self.dateTimeEdit.setGeometry(QtCore.QRect(230, 240, 194, 22))
        self.dateTimeEdit.setObjectName("dateTimeEdit")
        self.dateTimeEdit_2 = QtWidgets.QDateTimeEdit(self.centralwidget)
        self.dateTimeEdit_2.setGeometry(QtCore.QRect(230, 180, 194, 22))
        self.dateTimeEdit_2.setObjectName("dateTimeEdit_2")
        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "任务发布器"))
        self.pushButton.setText(_translate("MainWindow", "发布任务"))
        self.pushButton_2.setText(_translate("MainWindow", "导出签到表"))
        self.label.setText(_translate("MainWindow", "班级:"))
        self.label_2.setText(_translate("MainWindow", "开始打卡时间:"))
        self.label_3.setText(_translate("MainWindow", "打卡地点段:"))
        self.label_4.setText(_translate("MainWindow", "结束打卡时间:"))


class Task(QtWidgets.QMainWindow, Ui_MainWindow):

    # trans_data = pyqtSignal(str)

    def __init__(self, parent=None):

        super(Task, self).__init__(parent)

        self.setupUi(self)

        # self.server_thread = Thread()

        # self.phone=socket.socket(socket.AF_INET,socket.SOCK_STREAM) #买手机
        # self.phone.bind(('127.0.0.1',8080)) #插电话卡
        # self.phone.listen(5) #开机，backlog
        # print('listennig....')
        # # self.conn,self.addr=self.phone.accept() #接电话

        # self.serverTimer = QtCore . QTimer()

        # self.serverTimer.start(10)

        self.slot_init()

    def slot_init(self):

        # self . serverTimer . timeout . connect ( self . serverListen   )

        self.pushButton.clicked.connect(self.send)
        self.pushButton_2.clicked.connect(self.export)

        # self . server_thread . trans_back . connect ( )

    # def serverListen(self):
    #
    #     try:
    #         print(conn)
    #         print('client addr', addr)
    #         print('ready to read msg')
    #         client_msg = conn.recv(1024)  # 收消息
    #         print('client msg: %s' % client_msg)
    #         client_msg = "geikehuduan"
    #         conn.send(client_msg.encode('utf-8'))  # 发消息
    #     except Exception as e:
    #
    #         # print(count)
    #         print(str(e))
    #         print('连接断开....')
    #         conn, addr = self.phone.accept()  # 接电话
    #         print('listennig....')
    #         # count = count + 1

    def export(self):

        self . window = sign_data( )
        self . windwow_status = self . window . exec_()

    def send(self):

        self.find = False

        self.class_name = self.lineEdit.text()

        self.start_time = self.dateTimeEdit_2.time()

        self.start_date = self.dateTimeEdit_2.date()

        self.start_datatime = datetime.datetime.strptime(
            str(self.start_date.toString("yyyy-MM-dd")) + str(self.start_time.toString()), '%Y-%m-%d%H:%M:%S')
        print(self.start_datatime)

        self.end_time = self.dateTimeEdit.time()

        self.end_date = self.dateTimeEdit.date()

        self.end_datatime = datetime.datetime.strptime(
            str(self.end_date.toString("yyyy-MM-dd")) + str(self.end_time.toString()), '%Y-%m-%d%H:%M:%S')
        print(self.end_datatime)

        self.location = self.lineEdit_3.text()

        con = sqlite3.connect(r"f:\\pyqtui\\task_data.db")

        c = con.cursor()

        sql = "select * from task where class_name = ?"

        self.value = c.execute(sql, (self.class_name,))

        for i in self.value:
            self.find = True

        if self.find:

            sql = "update task set start_datatime = ? , end_datatime = ? , location = ? where class_name = ?"

            c.execute(sql, (self.start_datatime, self.end_datatime, self.location, self.class_name))

            print(self.start_datatime)
            print(self.end_datatime)

            c.execute("select * from task")

            print(c.fetchall())

            con.commit()

            self.find = False

        else:

            sql = "insert into task (class_name , start_datatime , end_datatime , location) values ( ? , ? , ? , ? )"

            c.execute(sql, (self.class_name, self.start_datatime, self.end_datatime, self.location))

            print(self.start_datatime)
            print(self.end_datatime)

            c.execute("select * from task")

            print(c.fetchall())

            con.commit()

            self.find = False

            # con.commit()


if __name__ == '__main__':
    app = QtWidgets.QApplication(sys.argv)
    ui = Task()
    # t = Timer(1,ui.text)
    # t.start()
    ui.show()
    sys.exit(app.exec_())




